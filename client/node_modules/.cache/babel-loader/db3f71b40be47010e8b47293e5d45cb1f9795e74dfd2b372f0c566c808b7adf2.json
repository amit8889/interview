{"ast":null,"code":"import{createStore,combineReducers,applyMiddleware}from'redux';import{thunk}from'redux-thunk';//import {cartReducer} from './reducers/cartReducer'\nimport{composeWithDevTools}from'redux-devtools-extension';// import {productsReducer,newProductReducer,productDetailsReducer,newReviewReducer, productReducer, productReviewsReducer, reviewReducer} from './reducers/productReducer';\n// import {profileReducer, userReducer,forgotPasswordReducer, allUsersReducer, userDetailsReducer}  from \"./reducers/userReducer\";\n// import {allOrdersReducer, myOrdersReducer, newOrderReducer, orderDetailsReducer, OrderReducer } from './reducers/orderReducer'\n// import { getAllReview } from './action/productAction';\nimport{socketReducer}from'./Reducers/socket.reducer';const reducer=combineReducers({socket:socketReducer// products:productsReducer,\n// productDetails:productDetailsReducer,\n// user:userReducer,\n// profile:profileReducer,\n// forgotPassword:forgotPasswordReducer,\n// cart:cartReducer,\n// newOrder:newOrderReducer,\n// myOrders:myOrdersReducer,\n// orderDetails:orderDetailsReducer,\n// newReview:newReviewReducer,\n// newProduct:newProductReducer,\n// product:productReducer,\n// allOrders:allOrdersReducer,\n// order:OrderReducer,\n// allUsers:allUsersReducer,\n// userDetails:userDetailsReducer,\n// productReviews:productReviewsReducer,\n// review:reviewReducer\n});let initialState={//don't keep initial state empty \n//if data is exist in local sorage mean cart item exist the take from local stroage \n//other wise keep empty\n// cart:{\n//     cartItems: localStorage.getItem(\"cartItems\")\n//   ? JSON.parse(localStorage.getItem(\"cartItems\"))\n//   : [],\n//   shippingInfo:localStorage.getItem(\"shippingInfo\")\n//   ?JSON.parse(localStorage.getItem(\"shippingInfo\"))\n//   :{},\n// }\nsocket:{}};const middleware=[thunk];const store=createStore(reducer,initialState,composeWithDevTools(applyMiddleware(...middleware)));export default store;","map":{"version":3,"names":["createStore","combineReducers","applyMiddleware","thunk","composeWithDevTools","socketReducer","reducer","socket","initialState","middleware","store"],"sources":["/home/amit/Desktop/Int/client/src/store.js"],"sourcesContent":["import{createStore,combineReducers,applyMiddleware} from'redux';\nimport {thunk} from 'redux-thunk'\n//import {cartReducer} from './reducers/cartReducer'\nimport{composeWithDevTools} from 'redux-devtools-extension';\n// import {productsReducer,newProductReducer,productDetailsReducer,newReviewReducer, productReducer, productReviewsReducer, reviewReducer} from './reducers/productReducer';\n// import {profileReducer, userReducer,forgotPasswordReducer, allUsersReducer, userDetailsReducer}  from \"./reducers/userReducer\";\n// import {allOrdersReducer, myOrdersReducer, newOrderReducer, orderDetailsReducer, OrderReducer } from './reducers/orderReducer'\n// import { getAllReview } from './action/productAction';\nimport { socketReducer } from './Reducers/socket.reducer';\n\n\nconst reducer =combineReducers({ \n    socket:socketReducer\n    // products:productsReducer,\n    // productDetails:productDetailsReducer,\n    // user:userReducer,\n    // profile:profileReducer,\n    // forgotPassword:forgotPasswordReducer,\n    // cart:cartReducer,\n    // newOrder:newOrderReducer,\n    // myOrders:myOrdersReducer,\n    // orderDetails:orderDetailsReducer,\n    // newReview:newReviewReducer,\n    // newProduct:newProductReducer,\n    // product:productReducer,\n    // allOrders:allOrdersReducer,\n    // order:OrderReducer,\n    // allUsers:allUsersReducer,\n    // userDetails:userDetailsReducer,\n    // productReviews:productReviewsReducer,\n    // review:reviewReducer\n\n    \n\n    \n});\n\nlet initialState={\n   //don't keep initial state empty \n   //if data is exist in local sorage mean cart item exist the take from local stroage \n   //other wise keep empty\n    // cart:{\n    //     cartItems: localStorage.getItem(\"cartItems\")\n    //   ? JSON.parse(localStorage.getItem(\"cartItems\"))\n    //   : [],\n    //   shippingInfo:localStorage.getItem(\"shippingInfo\")\n    //   ?JSON.parse(localStorage.getItem(\"shippingInfo\"))\n    //   :{},\n    // }\n    socket:{}\n};\nconst middleware =[thunk];\n\nconst store =createStore(\n    reducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;"],"mappings":"AAAA,OAAOA,WAAW,CAACC,eAAe,CAACC,eAAe,KAAM,OAAO,CAC/D,OAAQC,KAAK,KAAO,aAAa,CACjC;AACA,OAAOC,mBAAmB,KAAO,0BAA0B,CAC3D;AACA;AACA;AACA;AACA,OAASC,aAAa,KAAQ,2BAA2B,CAGzD,KAAM,CAAAC,OAAO,CAAEL,eAAe,CAAC,CAC3BM,MAAM,CAACF,aACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKJ,CAAC,CAAC,CAEF,GAAI,CAAAG,YAAY,CAAC,CACd;AACA;AACA;AACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,MAAM,CAAC,CAAC,CACZ,CAAC,CACD,KAAM,CAAAE,UAAU,CAAE,CAACN,KAAK,CAAC,CAEzB,KAAM,CAAAO,KAAK,CAAEV,WAAW,CACpBM,OAAO,CACPE,YAAY,CACZJ,mBAAmB,CAACF,eAAe,CAAC,GAAGO,UAAU,CAAC,CACtD,CAAC,CAED,cAAe,CAAAC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}